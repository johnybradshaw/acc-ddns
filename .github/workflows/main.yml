name: Scan, Build, Publish

on:
    push:
      branches: [ "main" ]
      paths: 
        - 'Dockerfile'
        - 'python/**/*.py'
        - 'python/requirements.txt'
      tags: [ 'v*.*.*' ]
    pull_request:
      # The branches below must be a subset of the branches above
      branches: [ "main" ]
      paths: 
        - 'Dockerfile'
        - 'python/**.py'
        - 'python/requirements.txt'
    schedule:
      - cron: '19 9 * * 3'
    workflow_dispatch:

permissions:
  contents: read
  packages: write
  # This is used to complete the identity challenge
  # with sigstore/fulcio when running outside of PRs.
  id-token: write

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  code-scan:
    name: Scan code for vulnerabilities
    # Environment variables required for Snyk to run
    env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
    # Permissions required for Snyk to run
    permissions:
        contents: read # for actions/checkout to fetch code
        security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
        actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout code
        uses: actions/checkout@v4

      # Install the Snyk CLI
      - name: Set up Snyk CLI to check for security issues
        uses: snyk/actions/setup@master

      # Install Python and grab dependencies
      - name: Setup Python environment
        uses: actions/setup-python@v5
        with:
          cache: 'pip'

      # Install dependencies
      - name: Install dependencies
        run: pip install -r python/requirements.txt

      # Runs Snyk Code (SAST) analysis and uploads result into GitHub.
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --sarif-file-output=snyk-code.sarif --file=python/requirements.txt

      # Push the Snyk Code results into GitHub Code Scanning tab
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
            sarif_file: snyk-code.sarif

  container-scan:
      name: Scan container for vulnerabilities
      needs: [code-scan]
      # Environment variables required for Snyk to run
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      
      # Permissions required for Snyk to run
      permissions:
        contents: read # for actions/checkout to fetch code
        security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
        actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
      
      # The type of runner that the job will run on
      runs-on: ubuntu-latest
      
      # Steps represent a sequence of tasks that will be executed as part of the job
      steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        
      # Build the Docker image for testing
      - name: Build a Docker image
        run: docker build -t ${{ github.repository }} .

      # Runs Snyk Container (Container and SCA) analysis and uploads result to Snyk.
      - name: Run Snyk to check Docker image for vulnerabilities
        # Snyk can be used to break the build when it detects vulnerabilities.
        # In this case we want to upload the issues to GitHub Code Scanning
        continue-on-error: true
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ github.repository }}
          args: --file=Dockerfile
          sarif_file: snyk.sarif

      # Upload result to GitHub Code Scanning
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk.sarif

  build:
    name: Build and push Docker image
    needs: [container-scan, code-scan]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v3.3.0 
        #with:
          #cosign-release: 'v2.2.2'

      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.3.0 
        with:
          # Enable multi-platform builds
          install: true
          use: true
          version: latest
          
      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3.2.0 
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5.5.1
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          # Add 'latest' tag for builds on the main branch
          tags: |
            type=semver,pattern={{version}}
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            ${{
              github.ref == 'refs/heads/main' && 
              'type=raw,value=latest'
            }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5.3.0 
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # Specify multiple platforms
          platforms: linux/amd64,linux/arm64

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
